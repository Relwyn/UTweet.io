swagger: "2.0"
info:
  description: "This is UTweet API's documention. You can call this API at [https://utweet-api.io](https://utweet-api.io), you can find out more informations about models for example in the official git: [UTweet-Git](https://github.com/Relwyn/UTweet.io). "
  version: "1.0.0"
  title: "UTweet"
host: "utweet-api.io"
basePath: "/"
tags:
  - name: "User"
    description: "Everything about the User"
  - name: "Twitter_acccount"
    description: "Twitter acccount linked to the User"
  - name: "Message"
    description: "Message's information"
schemes:
  - "https"
paths:
  /user:
    post:
      tags:
        - "User"
      summary: "Add a new user to the DB"
      description: "Add a new user and send him a validation mail available for 2 days, if he does not authenticate delete his account"
      operationId: "addUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be added to the DB"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        400:
          description: "badRequest"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"

  /user/{userId}:
    put:
      tags:
        - "User"
      summary: "Update an existing pet"
      description: ""
      operationId: "updatePet"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"

    get:
      tags:
        - "User"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Invalid status value"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"

    delete:
      tags:
        - "User"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      active:
        type: "boolean"
      logo_path:
        type: "string"
    xml:
      name: "User"
