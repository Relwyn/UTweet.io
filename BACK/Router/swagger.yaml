swagger: "2.0"
info:
  description: "This is UTweet API's documention. You can call this API at [https://utweet-api.io](https://utweet-api.io), you can find out more informations about models for example in the official git: [UTweet-Git](https://github.com/Relwyn/UTweet.io). "
  version: "1.0.0"
  title: "UTweet"
host: "utweet-api.io"
basePath: "/"
tags:
  - name: "Authenticate"
    description: "Log the user"
  - name: "Message"
    description: "Message's information"
  - name: "Twitter_acccount"
    description: "Twitter acccounts linked to the User"
  - name: "User"
    description: "Everything about the User"

schemes:
  - "https"
paths:
  /login:
    post:
      tags:
        - "Authenticate"
      summary: "Add a new user to the DB"
      description: "Add a new user and send him a validation mail available for 2 days, if he does not authenticate delete his account"
      operationId: "login"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be added to the DB"
          required: true
          schema:
            $ref: "#/definitions/Auth"
      responses:
        200:
          description: "ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "badRequest"
        401:
          description: "unauthorized"

  /user:
    post:
      tags:
        - "User"
      summary: "Add a new user to the DB"
      description: "Add a new user and send him a validation mail available for 2 days, if he does not authenticate delete his account"
      operationId: "addUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be added to the DB"
          required: true
          schema:
            type: "object"
            properties:
              User:
                $ref: "#/definitions/User"
              Auth:
                $ref: "#/definitions/Auth"
      responses:
        400:
          description: "badRequest"

    put:
      tags:
        - "User"
      summary: "Update an existing user"
      description: ""
      operationId: "updateUser"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "header"
          name: "token"
          description: "Token containing user's id"
          type: "string"
        - in: "body"
          name: "body"
          description: "User object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        400:
          description: "badRequest"
        404:
          description: "notFound"


    get:
      tags:
        - "User"
      summary: "Finds User by Id"
      description: "return user's data"
      operationId: "getUser"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "token"
          description: "Token containing user's id"
          type: "string"
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "notFound"

    delete:
      tags:
        - "User"
      summary: "Deletes a user"
      description: ""
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "token"
          description: "Token containing user's id"
          type: "string"
      responses:
        404:
          description: "notFound"
        500:
          description: "internalServerError"

  /message:
    post:
      tags:
        - "Message"
      summary: "Add a new message to the DB"
      description: "Add a new message to the DB linked to the user and twitter_account"
      operationId: "addMessage"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Message object that needs to be added to the DB"
          required: true
          schema:
            $ref: "#/definitions/Message"
      responses:
        400:
          description: "badRequest"

  /message/{messageId}:
    put:
      tags:
        - "Message"
      summary: "Update a user's message"
      description: "Check if the user is the owner, find and update the message"
      operationId: "updateMesssage"
      consumes:
        - "application/json"
      produces:
        - "application/xml"
      parameters:
        - in: "header"
          name: "token"
          description: "Token containing user's id"
          type: "string"
        - name: "messageId"
          in: "path"
          description: "Id of the message to update"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Message object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Message"
      responses:
        400:
          description: "badRequest"
        404:
          description: "notFound"
    get:
      tags:
        - "Message"
      summary: "Finds message by Id"
      description: "return message's data"
      operationId: "getMessage"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "token"
          description: "Token containing user's id"
          type: "string"
        - name: "messageId"
          in: "path"
          description: "id of the message to get"
          required: true
          type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Message"
        404:
          description: "notFound"
    delete:
      tags:
        - "Message"
      summary: "Deletes a message"
      description: "delete a message by id"
      operationId: "deleteMessage"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "token"
          description: "Token containing user's id"
          type: "string"
        - name: "messageId"
          in: "path"
          description: "Id of the message to delete"
          required: true
          type: "integer"
      responses:
        404:
          description: "notFound"
        500:
          description: "internalServerError"

definitions:
  Auth:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "Auth"
  Message:
    type: "object"
    properties:
      text:
        type: "string"
        description: "message's text"
      date:
        type: "string"
        description: "next sending date"
      countdown:
        type: "string"
        description: "number of Message to send"
      timer:
        type: "string"
        description: "time between each message"
      user_id:
        type: "integer"
        description: "user's id"
      twitter_account:
        type: "array"
        items:
          type: "integer"
      images:
        type: "array"
        description: "array of image in base64 string format "
        items:
          type: "string"
    xml:
      name: "Message"
  Twitter_account:
    type: "object"
    properties:
      api_id:
        type: "string"
      api_secret:
        type: "string"
      email:
        type: "string"
      name:
        type: "string"
    xml:
      name: "Twitter_account"
  User:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      active:
        type: "boolean"
      logo_path:
        type: "string"
    xml:
      name: "User"
